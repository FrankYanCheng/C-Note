//C风格的字符串，就是const char[]，但是容易造成溢出，一般用C++风格的标准库类型string则不存在这些内存管理的问题
#include<iostream>
#include<string>
using namespace std;
void main()
{


	//不能按下面这种方法写，但是可以直接写hello world
	//因为字符串字面值其实是一个const char的类型的匿名数组
	/*const char *cp = {'1','2','3','\0'};*/
	//-----------------------------------------这样写直接乱码了------------因为没有null指针,每次指向的乱码还不一样
	/*const char char1[] = { '1', '2', '3' };
	const char *cp = char1;*/
	//-----------------------------------正常情况
	const char char1[] = { '1', '2', '3' ,'\0'};
	const char *cp = char1;
	//------------------对于C风格字符串的标准库函数使用时，一定不要忘了加\0
	string::size_type t=strlen(char1);
	cout << t << endl;
	while (*cp)
	{
		cout << *cp;
		cp++;
	}
	const char char2[] = { 'h', '\0' };
	const char *cp2 = char2;
	//---------------------------指针比较，比较的是存放地址，没有意义
	if (cp>cp2)
	{
		cout << "true";
	}
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
附：区别数组类型的指针和普通类型指针的区别
t所表示的是整个数组的值，*t指的是从第一个开始的值
不是数组的则*k指向值，k指向指针指向值的地址，&k指向指针的地址
  const char *t = "32345";
	cout << *(t+1) << endl;
	int i = 123;
	int *k =&i ;
	cout << *k << endl;









